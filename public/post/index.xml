<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mobu&#39;s Journal</title>
    <link>/post/</link>
    <description>Recent content in Posts on Mobu&#39;s Journal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Mubasser Kamal</copyright>
    <lastBuildDate>Wed, 05 Feb 2020 16:35:04 -0600</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ubuntu Setup</title>
      <link>/2020/02/05/ubuntu_setup/</link>
      <pubDate>Wed, 05 Feb 2020 16:35:04 -0600</pubDate>
      
      <guid>/2020/02/05/ubuntu_setup/</guid>
      <description>Setting up Ubuntu  Creating a New User adduser mobu  Set up root privileges (sudo) for our normal account usermod -aG sudo mobu The command ‘usermod‘ is used to modify or change any attributes of a already created user account via command line.
 -a append the user to the supplemental GROUPS mentioned by the -G option without removing him/her from other groups
-G new list of supplementary GROUPS</description>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt - guide</title>
      <link>/2020/02/04/letsencrypt/</link>
      <pubDate>Tue, 04 Feb 2020 13:54:46 -0600</pubDate>
      
      <guid>/2020/02/04/letsencrypt/</guid>
      <description>Basics of Let&#39;s Encrypt  open and automated certificate authority Let&#39;s Ecnrypt issues free SSL/TLS certificates Certbot - can automatically configure TLS/SSL on both Apache and Nginx web servers   What is a Certificate Authority?
Certificate authorities (CAs) are entities that cryptographically sign TLS/SSL certificates to vouch for their authenticity.
 3-part process  Install Certbot on your server Run Certbot with a command to obtain your SSL/TLS certificate and save it on your server.</description>
    </item>
    
    <item>
      <title>Unbound DNS Setup</title>
      <link>/2020/01/30/unbound_dns/</link>
      <pubDate>Thu, 30 Jan 2020 16:22:09 -0600</pubDate>
      
      <guid>/2020/01/30/unbound_dns/</guid>
      <description>Source: https://freedif.org/unbound-your-own-dns-server</description>
    </item>
    
    <item>
      <title>Wireguard - Setup</title>
      <link>/2020/01/30/wireguard/</link>
      <pubDate>Thu, 30 Jan 2020 12:00:24 -0600</pubDate>
      
      <guid>/2020/01/30/wireguard/</guid>
      <description>Link: https://www.ckn.io/blog/2017/11/14/wireguard-vpn-typical-setup/
Steps  Install WireGuard on the VPN server. Generate server and client keys. Generate server and client configs. Enable WireGuard interface on the server. Enable IP forwarding on the server. Configure firewall rules on the server. Configure DNS. Set up Wireguard on clients.  1. Install WireGuard on the VPN server add-apt-repository ppa:wireguard/wireguardapt-get updateapt-get install wireguard-dkms wireguard-tools linux-headers-$(uname -r)2. </description>
    </item>
    
    <item>
      <title>Nginx Security</title>
      <link>/2020/01/29/nginx_security/</link>
      <pubDate>Wed, 29 Jan 2020 11:17:44 -0600</pubDate>
      
      <guid>/2020/01/29/nginx_security/</guid>
      <description>1. Turn On SELinux 2. Linux /etc/sysctl.conf Hardening Using sysctl, you can modify the kernel parameters without recompiling the kernel or rebooting the machine.
# Avoid a smurf attacknet.ipv4.icmp_echo_ignore_broadcasts = 1# Turn on protection for bad icmp error messagesnet.ipv4.icmp_ignore_bogus_error_responses = 1# Turn on syncookies for SYN flood attack protectionnet.ipv4.tcp_syncookies = 1# Turn on and log spoofed, source routed, and redirect packetsnet.ipv4.conf.all.log_martians = 1net.</description>
    </item>
    
    <item>
      <title>Nginx - Virtualhost</title>
      <link>/2020/01/29/nginx_virtualhost/</link>
      <pubDate>Wed, 29 Jan 2020 00:28:39 -0600</pubDate>
      
      <guid>/2020/01/29/nginx_virtualhost/</guid>
      <description>Setting up a Reverse-Proxy with Nginx and docker-compose URL: https://www.domysee.com/blogposts/reverse-proxy-nginx-docker-compose</description>
    </item>
    
    <item>
      <title>Nginx - HTTP Proxy Pass</title>
      <link>/2020/01/29/nginx_proxypass/</link>
      <pubDate>Wed, 29 Jan 2020 00:18:00 -0600</pubDate>
      
      <guid>/2020/01/29/nginx_proxypass/</guid>
      <description>Basic HTTP Proxy Pass The proxy_pass directive sets the address of the proxied server and the URI to which location will be mapped.
The proxy_pass directive is mainly found in location contexts.
  When a request matches a location with a proxy_pass directive inside, the request is forwarded to the URL given by the directive.
# server context location /match/here {proxy_pass http://example.com;}. . .  By default proxy_pass does not verify the certificate of the endpoint if it is https.</description>
    </item>
    
    <item>
      <title>Python - Virtual Environment Setup</title>
      <link>/2020/01/28/python-virtualenv/</link>
      <pubDate>Tue, 28 Jan 2020 15:00:08 -0600</pubDate>
      
      <guid>/2020/01/28/python-virtualenv/</guid>
      <description>Python Virtual Environment   Creating a virtual environment in a new folder
python -m venv FolderName ⏎  Creating virtual environment inside an existent folder. Navigate to the folder inside where you want to create the environment
python -m venv . ⏎Notice the dot at the end of the statement. It basically says &amp;ldquo;here&amp;rdquo;
 The -m stands for module-name. venv is a built-in Python module that helps with virtual environments</description>
    </item>
    
    <item>
      <title>Nginx - notes</title>
      <link>/2020/01/28/nginx-docker/</link>
      <pubDate>Tue, 28 Jan 2020 01:09:50 -0600</pubDate>
      
      <guid>/2020/01/28/nginx-docker/</guid>
      <description>Main commands [sudo] nginx -s signal (while an nginx instance is running)
   Signal Action     stop fast shutdown   quit graceful shutdown (waits for workers)   reload reload the configuration file   reopen reopen the log files    test nginx configuration changes
# nginx -tthe configuration file /usr/local/nginx/conf/nginx.conf syntax is okconfiguration file /usr/local/nginx/conf/nginx.conf test is successful Configuration files # nginx server configuration directory/usr/local/nginx/conf//etc/nginx/# main configuration file/usr/local/nginx/conf/nginx.</description>
    </item>
    
    <item>
      <title>PostGIS - Installation</title>
      <link>/2020/01/24/postgis/</link>
      <pubDate>Fri, 24 Jan 2020 22:20:35 -0600</pubDate>
      
      <guid>/2020/01/24/postgis/</guid>
      <description>Installation   Update APT package list and upgrade system Prerequisite: PostgreSQL will need to be installed and configured beforehand.
sudo apt update sudo apt -y upgrade  -y switch basically means automatic yes to prompts; assume &amp;ldquo;yes&amp;rdquo; as answer to all prompts and run non-interactively
   Add UbuntuGIS-unstable repository &amp;amp; update sudo add-apt-repository ppa:ubuntugis/ppa sudo apt-get update   Install PostGIS sudo apt install postgis postgresql-12.1-postgis-3.0.0  replace the postgresql version with your own</description>
    </item>
    
    <item>
      <title>PostgreSQL - Management</title>
      <link>/2020/01/24/postgres_management/</link>
      <pubDate>Fri, 24 Jan 2020 21:24:09 -0600</pubDate>
      
      <guid>/2020/01/24/postgres_management/</guid>
      <description>Service management sudo service postgresql stop sudo service postgresql start sudo service postgresql restart Enter the database you created psql testdb Creating a table CREATE TABLE [IF NOT EXISTS] table_name ( column_name1 col_type (field_length) column_constraints, column_name2 col_type (field_length), column_name3 col_type (field_length) ); Listing information     Command Action     \l list all databases   \dt display all tables in current schema   \du list all users   \d list all the tables in the database   \d+ table_name retrieve detailed information about a table     Roles     Command Action     \du username list a username if present   create role rolename create a role with an existing username   create role rolename noinherit login password passsword; Create a role with username and password   set role test; change role for current session to test   grant role2 to role1; Allow test1 to set its role as role2     </description>
    </item>
    
    <item>
      <title>PostgreSQL - Setup &amp; Installation</title>
      <link>/2020/01/24/postgres/</link>
      <pubDate>Fri, 24 Jan 2020 12:59:48 -0600</pubDate>
      
      <guid>/2020/01/24/postgres/</guid>
      <description>Installing PostgreSQL Prerequisite: Make sure to have Ubuntu set up first.
 Using apt package manager, install Postgres (it&#39;s in the default Ubuntu repo).  $ sudo apt update $ sudo apt install postgresql postgresql-contrib Postgres associates roles with a matching Unix/Linux system account. So let&#39;s Switch over to the postgres account on your server by typing:  $ sudo -i -u postgres  postgres: this user is the superuser for the PostgreSQL instance</description>
    </item>
    
    <item>
      <title>Stream tutorial</title>
      <link>/2020/01/21/steamtutorial/</link>
      <pubDate>Tue, 21 Jan 2020 11:36:30 -0600</pubDate>
      
      <guid>/2020/01/21/steamtutorial/</guid>
      <description>Streams To create a Stream you have to create a StreamController
var controller = new StreamController&amp;lt;String&amp;gt;();controller.add(&amp;#34;Item1&amp;#34;); // Put first item on the belt The generic type (in this case String) that has to be passed when creating a StreamController defines which type of objects we can push onto the Stream.  Now we’ve got the trap set, using the .listen() method on the stream of the StreamController.
var controller = new StreamController&amp;lt;String&amp;gt;();controller.</description>
    </item>
    
    <item>
      <title>Dart Streamcontroller - Streams and stuff</title>
      <link>/2020/01/21/streamcontroller/</link>
      <pubDate>Tue, 21 Jan 2020 11:15:46 -0600</pubDate>
      
      <guid>/2020/01/21/streamcontroller/</guid>
      <description>BLoC Pattern  BLoC stands for Business Logic Components  Data Layer - The data layer is responsible for the app’s models and the connections to the back-end, it knows nothing about about the UI.
The BLoC Pattern is really just an interface around Dart streams: Streams, like Futures, are provided by the dart:async package
 A stream is like a Future, but instead of returning a single value asynchronously, streams can yield multiple values over time  First BLoC Create a new directory in the lib folder named BLoC.</description>
    </item>
    
    <item>
      <title>Hugo Tutorial</title>
      <link>/2020/01/14/hugo-tutorial/</link>
      <pubDate>Tue, 14 Jan 2020 13:08:12 -0600</pubDate>
      
      <guid>/2020/01/14/hugo-tutorial/</guid>
      <description>For Windows, download from https://github.com/gohugoio/hugo/releases
  Extract the zip file in any folder.
  (Optional) You can add the folder path to the PATH environment variable.
 Click on the Windows search button and type env    Click the Environment Variables&amp;hellip; button    Double-click the Path variable (you can also select Path and click on the Edit button)    Add the full path of the Hugo directory (Hugo.</description>
    </item>
    
  </channel>
</rss>